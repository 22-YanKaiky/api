generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Genre {
  male
  female
  prefer_not_anwer
}

model Users {
  guid         String    @id @unique() @default(uuid()) @db.Uuid
  name         String
  last_name    String?
  email        String    @unique
  phone        String?
  birthday     DateTime  @db.Date
  password     String?   @db.Text
  isAdmin      Boolean   @default(false)
  genre        Genre?
  image_url    String?
  country      String?
  zipcode      String?
  house_number String?
  state        String?
  city         String?
  neighborhood String?
  street       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  deletedAt    DateTime?

  UserMovieLikes UserMovieLikes[]
  UserSerieLikes UserSerieLikes[]
  UserAnimeLikes UserAnimeLikes[]
  @@map("users")
}

model Animes {
  guid              String    @id @unique() @default(uuid()) @db.Uuid
  name              String    @unique
  link              String?
  comming_soon      Boolean
  date              DateTime?
  quantity_likes    Int?      @default(0)
  quantity_dislikes Int?      @default(0)
  genre             String
  seasons           Int
  episodes          Int
  year              Int
  synopsis          String
  folder            String
  trailer           String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime?

  UserAnimeLikes UserAnimeLikes[]
  @@map("animes")
}

model Movies {
  guid              String    @id @unique() @default(uuid()) @db.Uuid
  name              String    @unique
  link              String?
  comming_soon      Boolean
  date              DateTime?
  quantity_likes    Int?      @default(0)
  quantity_dislikes Int?      @default(0)
  genre             String
  time              String
  year              Int
  direction         String
  synopsis          String
  folder            String
  trailer           String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime?

  UserMovieLikes UserMovieLikes[]
  @@map("movies")
}

model Series {
  guid              String    @id @unique() @default(uuid()) @db.Uuid
  name              String    @unique
  link              String?
  comming_soon      Boolean
  date              DateTime?
  quantity_likes    Int?      @default(0)
  quantity_dislikes Int?      @default(0)
  genre             String
  seasons           Int
  episodes          Int
  year              Int
  synopsis          String
  folder            String
  trailer           String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  deletedAt         DateTime?

  UserSerieLikes UserSerieLikes[]
  @@map("series")
}

model UserMovieLikes {
  guid       String   @id @unique() @default(uuid()) @db.Uuid
  user_guid  String   @db.Uuid
  user       Users    @relation(fields: [user_guid], references: [guid])
  movie_guid String   @db.Uuid
  movie      Movies   @relation(fields: [movie_guid], references: [guid])
  favorite   Boolean?
  like       Boolean? @default(false)
  dislike    Boolean? @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("user_movie_likes")
}

model UserSerieLikes {
  guid       String   @id @unique() @default(uuid()) @db.Uuid
  user_guid  String   @db.Uuid
  user       Users    @relation(fields: [user_guid], references: [guid])
  serie_guid String   @db.Uuid
  serie      Series   @relation(fields: [serie_guid], references: [guid])
  favorite   Boolean?
  like       Boolean? @default(false)
  dislike    Boolean? @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("user_serie_likes")
}

model UserAnimeLikes {
  guid       String   @id @unique() @default(uuid()) @db.Uuid
  user_guid  String   @db.Uuid
  user       Users    @relation(fields: [user_guid], references: [guid])
  anime_guid String   @db.Uuid
  anime      Animes   @relation(fields: [anime_guid], references: [guid])
  favorite   Boolean?
  like       Boolean? @default(false)
  dislike    Boolean? @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("user_anime_likes")
}
